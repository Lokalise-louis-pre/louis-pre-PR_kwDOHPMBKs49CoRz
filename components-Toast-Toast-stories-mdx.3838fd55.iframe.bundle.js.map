{"version":3,"file":"components-Toast-Toast-stories-mdx.3838fd55.iframe.bundle.js","mappings":";;AA8BA;AACA;AAIA;AAGA;AACA;AACA;AAIA;AAQA;AACA;AACA;;;AAGA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AAGA;AACA;;AAMA;AACA;AAEA;AACA;;;;AAIA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;AAIA;AACA;;;AAGA;;;;AAIA;;;AAGA;;;AAMA;;;;;;;AAOA;;;AAGA;;AAEA;;AAEA;;AAGA;;;AAIA;;AAEA;;;AAIA;;AAEA;;;AAIA;;AAEA;;;;;AAMA;;;;AAIA;AACA;AACA;;AAEA;;AAIA;;;;;;;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;;AAQA;;;;;;AAMA;;AAIA;;AAGA;;AAGA;;;AAMA;;;;;;;ACpNA;;;;;;AAOA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;;AAOA;;;;AAIA;AACA;;AAEA;;;AAGA;;;;;AAKA;;AAEA;;;AAKA;;;;;;;;AClIA;AACA;AACA;AACA;AAGA;AACA;;;AAKA;AACA;AAGA;AACA;AAGA;AACA;AAWA;AAPA;AAGA;AACA;AAGA;AACA;AAOA;AAHA;AAGA;AACA;;;;AC9DA;;;;;;;AASA;;;;;;AAMA;AAGA;AACA;;;;;;;AASA;AACA;;AAIA;;;AAGA;;;AAGA;;;;;;;;;;AAeA;;;;;;;;;AAWA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;AAMA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAIA;;;;;AAKA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA","sources":["webpack://@lokalise/louis/./src/components/Button/styles.ts","webpack://@lokalise/louis/./src/components/IconButton/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/components/Toast/styles.ts"],"sourcesContent":["import { LoadingSignIcon } from '../../foundations/icons';\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance, ButtonVariant, Size } from './Button';\n\ntype ButtonProps = {\n    size: Size;\n    variant: ButtonVariant;\n    appearance: Appearance;\n    active: boolean;\n    disabled: boolean;\n    isLoading: boolean;\n};\n\nconst appearanceToColorCode = (appearance: Appearance) => {\n    const colorCodes = {\n        default: 'primary',\n        primary: 'primary',\n        danger: 'red',\n        warning: 'yellow',\n    } as const;\n\n    return colorCodes[appearance];\n};\n\nconst getOutlineStyles = (colorType: 'idle' | 'hover', appearance: Appearance, transparent = false) => {\n    if (appearance === 'default') {\n        return css`\n            background-color: transparent;\n            color: ${color('content.primary')};\n            border-color: ${color('content.primary')};\n        `;\n    }\n\n    const appearanceColorCode = appearanceToColorCode(appearance);\n\n    return css`\n        background-color: ${transparent ? 'transparent' : color(`surface.${appearanceColorCode}50`)};\n        border-color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n        color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n    `;\n};\n\nconst getColorStyles = (appearance: Appearance, colorCode: 'white' | 'black') => {\n    if (appearance === 'default') {\n        return undefined;\n    }\n\n    const appearanceColorCode = appearanceToColorCode(appearance);\n\n    return css`\n        background-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n        border-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n        color: ${color(`content.${colorCode}`)};\n\n        &:hover:not([disabled]):not([aria-expanded='true']) {\n            background-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n            border-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n            color: ${color(`content.${colorCode}`)};\n        }\n\n        &:active:not([disabled]) {\n            background-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n            border-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n        }\n\n        ${modifier(\n            'active',\n            css`\n                background-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n                border-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n            `,\n        )}\n    `;\n};\n\nconst variantColorStyles = css`\n    ${variants('appearance', {\n        default: css<ButtonProps>`\n            background-color: ${color(`content.white`)};\n            color: ${color('primary.400')};\n            border-color: transparent;\n\n            &:hover:not([disabled]):not([aria-expanded='true']) {\n                color: ${color('primary.500')};\n            }\n        `,\n        primary: css<ButtonProps>`\n            ${getColorStyles('primary', 'white')}\n        `,\n        warning: css<ButtonProps>`\n            ${getColorStyles('warning', 'black')}\n        `,\n        danger: css<ButtonProps>`\n            ${getColorStyles('danger', 'white')}\n        `,\n    })}\n\n    ${variants('variant', {\n        solid: css``,\n        outline: css<ButtonProps>`\n            border-width: 1px;\n            ${({ appearance }) => css`\n                ${getOutlineStyles('idle', appearance, true)}\n\n                &:hover:not([disabled]):not([aria-expanded='true']) {\n                    ${getOutlineStyles('hover', appearance, true)}\n                }\n\n                &:active:not([disabled]) {\n                    ${getOutlineStyles('hover', appearance)}\n                }\n\n                ${modifier('active', getOutlineStyles('hover', appearance))}\n            `}\n        `,\n    })}\n`;\n\nexport const Container = styled(Pressable)<ButtonProps>`\n    display: inline-flex;\n    align-items: center;\n    background-color: transparent;\n    border: 1px solid transparent;\n    text-decoration: none;\n    vertical-align: middle;\n    border-radius: ${radius('md')};\n    cursor: pointer;\n    position: relative;\n    transition: all ${transitionTime()};\n    box-sizing: border-box;\n    font-family: ${fontFamily('default')};\n\n    ${variants('size', {\n        xs: css`\n            font-size: 11px;\n            padding: ${spacing(0, 2)};\n            height: 20px;\n            line-height: 12px;\n        `,\n        sm: css`\n            font-size: 12px;\n            padding: ${spacing(0, 3)};\n            height: 30px;\n            line-height: 12px;\n        `,\n        md: css`\n            font-size: 14px;\n            padding: ${spacing(0, 3)};\n            height: 35px;\n            line-height: 14px;\n        `,\n        lg: css`\n            font-size: 18px;\n            padding: ${spacing(0, 4)};\n            height: 45px;\n            line-height: 18px;\n        `,\n    })}\n\n    ${variantColorStyles}\n\n    &:disabled {\n        cursor: not-allowed;\n        background-color: ${color('surface.secondary')};\n        color: ${color('content.disabled')};\n        border-color: ${color('content.disabled')};\n\n        ${modifier('isLoading', variantColorStyles)}\n    }\n`;\n\nexport const Content = styled.span<{ isHidden: boolean; size: Size }>`\n    display: grid;\n    grid-auto-flow: column;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n\n    ${variants('size', {\n        xs: css`\n            gap: ${spacing(1)};\n        `,\n        sm: css`\n            gap: ${spacing(2)};\n        `,\n        md: css`\n            gap: ${spacing(2)};\n        `,\n        lg: css`\n            gap: ${spacing(2)};\n        `,\n    })}\n\n    ${modifier(\n        'isHidden',\n        css`\n            opacity: 0;\n        `,\n    )}\n`;\n\nexport const Text = styled.span<{ size: Size }>`\n    position: relative;\n    align-items: center;\n    display: inline-flex;\n    white-space: nowrap;\n\n    ${variants('size', {\n        xs: css`\n            top: 0;\n        `,\n        sm: css`\n            top: -1px; // Make text visually centered\n        `,\n        md: css`\n            top: -1px; // Make text visually centered\n        `,\n        lg: css`\n            top: -1px; // Make text visually centered\n        `,\n    })}\n`;\n\nexport const StyledLoadingSign = styled(LoadingSignIcon)`\n    font-size: 1.3em;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`;\n","import { css, styled } from '../../utils/styled';\nimport { color, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance } from './IconButton';\n\ntype IconButtonProps = {\n    appearance: Appearance;\n    active?: boolean;\n    disabled?: boolean;\n    isLoading: boolean;\n};\n\nconst variantColorStyles = css`\n    ${variants('appearance', {\n        primary: css`\n            padding: 6px;\n            font-size: 20px;\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color('surface.primary100')};\n                color: ${color(`primary.500`)};\n            }\n\n            // pressed\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`primary.200`)};\n                color: ${color(`primary.500`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.primary50`)};\n                color: ${color(`primary.500`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.primary50`)};\n                    color: ${color(`primary.500`)};\n                `,\n            )}\n        `,\n        secondary: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`border.secondary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`border.primary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.secondary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.secondary`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n        verified: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`surface.yellow100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`yellow.200`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.yellow100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.yellow50`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n        reviewed: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`surface.green100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`green.200`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.green100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.green50`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n    })}\n`;\n\nexport const Container = styled(Pressable)<IconButtonProps>`\n    display: inline-flex;\n    align-items: center;\n    background-color: transparent;\n    color: ${color(`content.primary`)};\n    transition: background-color ${transitionTime()}, color ${transitionTime()};\n    border: 0;\n    border-radius: ${radius('md')};\n    text-decoration: none;\n\n    ${variantColorStyles}\n\n    // disabled\n    &:disabled {\n        cursor: not-allowed;\n        color: ${color('interactive.primary.disabled')};\n\n        ${modifier(\n            'isLoading',\n            css`\n                color: initial;\n                cursor: auto;\n                ${variantColorStyles}\n            `,\n        )}\n    }\n`;\n","import type { StyledProps } from '../../utils/styled';\nimport { css, styled } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type Color = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n    color?: Color;\n    fill?: Color;\n    stroke?: Color;\n    size?: string;\n};\n\nconst commonConfig = { shouldForwardProp: excludeProps(['fill', 'color', 'stroke']) };\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n    color: 'inherit',\n    fill: 'currentColor',\n    stroke: undefined,\n};\n\nconst colorHelper = (\n    colorType: keyof typeof colorTypesDefaults,\n    inputColor: Color | undefined,\n    props: StyledProps<unknown>,\n) =>\n    inputColor && !reservedKeywords.includes(inputColor)\n        ? color(inputColor as NamedColor)(props)\n        : colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n    pointer-events: all;\n    box-sizing: border-box;\n    color: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n    fill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n    stroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n    font-size: ${(props) => props.size};\n`;\n\nexport const SvgRoot = styled.svg.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n    width: 1em;\n    height: 1em;\n`;\n\nexport const Path = styled.path.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Rect = styled.rect.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const G = styled.g.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Circle = styled.circle.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const LinearGradient = styled.linearGradient.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Defs = styled.defs.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Stop = styled.stop.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const ClipPath = styled.clipPath.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n","import { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, typography, zIndex } from '../../utils/theme';\nimport { IconButton } from '../IconButton';\nimport type { IconButtonProps } from '../IconButton';\nimport type { PressableProps } from '../Pressable';\nimport { Pressable } from '../Pressable';\n\nexport const CloseIconButton = styled(IconButton)<IconButtonProps>`\n    opacity: 0;\n    transition: opacity 0.2s;\n`;\n\nexport const TypeIcon = styled.div`\n    flex-basis: 16px;\n    flex-shrink: 0;\n    flex-grow: 0;\n    height: 20px;\n    display: flex;\n    align-items: center;\n`;\n\nexport const Content = styled.div`\n    width: 100%;\n    flex-shrink: 1;\n    flex-grow: 1;\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: ${spacing(1)};\n`;\n\nexport const Title = styled.span`\n    ${typography('captionMedium')};\n    display: -webkit-box;\n    text-overflow: ellipsis;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    word-break: break-word;\n    overflow: hidden;\n`;\n\nexport const Description = styled.span`\n    ${typography('caption2')};\n    display: block;\n`;\n\nexport const ToastAnchor = styled(Pressable)<PressableProps>`\n    text-decoration: underline;\n    cursor: pointer;\n    transition: opacity ${transitionTime()};\n    font-weight: inherit;\n\n    ${modifier(\n        ({ href }: PressableProps) => !href,\n        css`\n            background-color: transparent;\n            border: none;\n            font-family: inherit;\n            padding: 0;\n        `,\n    )}\n\n    &:hover {\n        opacity: 0.7;\n    }\n`;\n\nexport const StyledToastContainer = styled(ToastContainer).attrs({\n    className: 'toast-container',\n})`\n    transform: translate3d(0, 0, 9999px);\n    position: fixed;\n    font-family: inherit;\n    width: 332px;\n    min-height: 44px;\n    box-sizing: border-box;\n    padding: 0;\n\n    --toastify-color-light: ${color('content.primary')};\n    --toastify-color-dark: var(--toastify-color-light);\n    --toastify-color-info: ${color('surface.primary50')};\n    --toastify-color-success: ${color('surface.green50')};\n    --toastify-color-warning: ${color('surface.yellow50')};\n    --toastify-color-error: ${color('surface.red50')};\n    //--toastify-color-transparent: rgba(255, 255, 255, 0.7);\n\n    --toastify-icon-color-info: ${color('primary.600')};\n    --toastify-icon-color-success: ${color('green.600')};\n    --toastify-icon-color-warning: ${color('yellow.800')};\n    --toastify-icon-color-error: ${color('red.600')};\n\n    //--toastify-toast-width: 320px;\n    //--toastify-toast-background: #fff;\n    //--toastify-toast-min-height: 64px;\n    //--toastify-toast-max-height: 800px;\n    --toastify-font-family: ${fontFamily('default')};\n    --toastify-z-index: ${zIndex('toast')};\n\n    --toastify-text-color-light: ${color('content.primary')};\n    --toastify-text-color-dark: var(--toastify-text-color-light);\n\n    --toastify-text-color-info: var(--toastify-text-color-light);\n    --toastify-text-color-success: var(--toastify-text-color-light);\n    --toastify-text-color-warning: var(--toastify-text-color-light);\n    --toastify-text-color-error: var(--toastify-text-color-light);\n\n    //--toastify-spinner-color: #616161;\n    //--toastify-spinner-color-empty-area: #e0e0e0;\n\n    // Used when no type is provided\n    // toast(\"**hello**\")\n    //--toastify-color-progress-light: linear-gradient(to right, #4cd964, #5ac8fa, #007aff, #34aadc, #5856d6, #ff2d55);\n    // Used when no type is provided\n    --toastify-color-progress-dark: var(--toastify-color-progress-light);\n    --toastify-color-progress-info: var(--toastify-icon-color-info);\n    --toastify-color-progress-success: var(--toastify-icon-color-success);\n    --toastify-color-progress-warning: var(--toastify-icon-color-warning);\n    --toastify-color-progress-error: var(--toastify-icon-color-error);\n\n    .Toastify__toast {\n        box-sizing: border-box;\n        padding: ${spacing(4, 2)};\n        width: 100%;\n        display: flex;\n        align-items: flex-start;\n        color: ${color('content.primary')};\n        box-shadow: none;\n        cursor: default;\n        min-height: 44px;\n        overflow: hidden;\n        border-radius: ${radius('md')};\n        margin-bottom: ${spacing(2)};\n\n        &:hover ${CloseIconButton} {\n            opacity: 1;\n        }\n    }\n\n    .Toastify__toast-icon {\n        margin: 0;\n    }\n\n    .Toastify__toast.Toastify__toast--success {\n        background-color: var(--toastify-color-success);\n\n        .Toastify__toast-icon {\n            color: var(--toastify-icon-color-success);\n        }\n    }\n\n    .Toastify__toast.Toastify__toast--error {\n        background-color: var(--toastify-color-error);\n\n        .Toastify__toast-icon {\n            color: var(--toastify-icon-color-error);\n        }\n    }\n\n    .Toastify__toast.Toastify__toast--warning {\n        background-color: var(--toastify-color-warning);\n\n        .Toastify__toast-icon {\n            color: var(--toastify-icon-color-warning);\n        }\n    }\n\n    .Toastify__toast.Toastify__toast--info {\n        background-color: var(--toastify-color-info);\n\n        .Toastify__toast-icon {\n            color: var(--toastify-icon-color-info);\n        }\n    }\n\n    .Toastify__toast-body {\n        width: 100%;\n        display: flex;\n        align-items: flex-start;\n        gap: ${spacing(2)};\n        padding: 0;\n    }\n`;\n"],"names":[],"sourceRoot":""}