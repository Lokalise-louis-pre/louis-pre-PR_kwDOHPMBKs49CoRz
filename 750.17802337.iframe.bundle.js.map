{"version":3,"file":"750.17802337.iframe.bundle.js","mappings":";;AAqBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClBA;;;;;;AAOA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;;AAOA;;;;AAIA;AACA;;AAEA;;;AAGA;;;;;AAKA;;AAEA;;;AAKA;;;;ACjKA;AAGA;AAGA;AACA;AACA;;;;AAIA;;;;;AAKA;;;;AAIA;;AAIA;AACA;;;AAGA;;AASA;;;AAGA;;;AAGA;AACA;AACA;;AAEA;AACA;;;;;;;;AAQA;;;;;AAKA;;;AAGA;AACA;AAGA;;;;AAIA;AACA;;;;;;;;;;AAUA;AACA;;;AAGA;AACA;AAYA;;;;AAKA;;;AAGA;;;;;;AAOA;;;;;;;;AAlBA;;;AC3FA;;AAQA;AACA;;;;;;;;AAQA;AAeA;;;AAAA;AACA;;;AAGA;AACA;;;;AAIA;;;;;;;;;AASA;;;;AAIA;AAGA;;;AAIA;AAGA;;;ACxEA;AACA;;AAEA;;AAEA;;;AAKA;;;;;;;;;ACsBA;AACA;AACA;AACA;AAGA;AACA;;;AAKA;AACA;AAGA;AACA;AAGA;AACA;AAWA;AAPA;AAGA;AACA;AAGA;AACA;AAOA;AAHA;AAGA;AACA","sources":["webpack://@lokalise/louis/./src/components/Flex/styles.ts","webpack://@lokalise/louis/./src/components/IconButton/styles.ts","webpack://@lokalise/louis/./src/utils/styles/inputStyle.ts","webpack://@lokalise/louis/./src/components/Input/styles.ts","webpack://@lokalise/louis/./src/components/InputErrorMessage/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts"],"sourcesContent":["import type { SpacingLevels } from '../../foundations/designTokens';\nimport type { CSSProperties } from '../../utils/styled';\nimport { css, styled } from '../../utils/styled';\nimport { modifier, spacing } from '../../utils/theme';\n\ntype ContainerProps = {\n    alignItems: CSSProperties['alignItems'];\n    justifyContent: CSSProperties['justifyContent'];\n    flexWrap: CSSProperties['flexWrap'];\n    flexDirection: CSSProperties['flexDirection'];\n    basis?: CSSProperties['flexBasis'];\n    grow?: CSSProperties['flexGrow'];\n    shrink?: CSSProperties['flexShrink'];\n    alignSelf?: CSSProperties['alignSelf'];\n    rowGap: SpacingLevels;\n    columnGap: SpacingLevels;\n    inline: boolean;\n};\n\nexport const Container = styled.div<ContainerProps>`\n    display: flex;\n    gap: ${({ rowGap }) => spacing(rowGap)} ${({ columnGap }) => spacing(columnGap)};\n    max-width: 100%;\n    align-items: ${({ alignItems }) => alignItems};\n    justify-content: ${({ justifyContent }) => justifyContent};\n    flex-wrap: ${({ flexWrap }) => flexWrap};\n    flex-direction: ${({ flexDirection }) => flexDirection};\n    flex-basis: ${({ basis }) => basis};\n    flex-grow: ${({ grow }) => grow};\n    flex-shrink: ${({ shrink }) => shrink};\n    align-self: ${({ alignSelf }) => alignSelf};\n    ${modifier(\n        'inline',\n        css`\n            display: inline-flex;\n        `,\n    )}\n`;\n","import { css, styled } from '../../utils/styled';\nimport { color, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance } from './IconButton';\n\ntype IconButtonProps = {\n    appearance: Appearance;\n    active?: boolean;\n    disabled?: boolean;\n    isLoading: boolean;\n};\n\nconst variantColorStyles = css`\n    ${variants('appearance', {\n        primary: css`\n            padding: 6px;\n            font-size: 20px;\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color('surface.primary100')};\n                color: ${color(`primary.500`)};\n            }\n\n            // pressed\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`primary.200`)};\n                color: ${color(`primary.500`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.primary50`)};\n                color: ${color(`primary.500`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.primary50`)};\n                    color: ${color(`primary.500`)};\n                `,\n            )}\n        `,\n        secondary: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`border.secondary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`border.primary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.secondary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.secondary`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n        verified: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`surface.yellow100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`yellow.200`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.yellow100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.yellow50`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n        reviewed: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`surface.green100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`green.200`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.green100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.green50`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n    })}\n`;\n\nexport const Container = styled(Pressable)<IconButtonProps>`\n    display: inline-flex;\n    align-items: center;\n    background-color: transparent;\n    color: ${color(`content.primary`)};\n    transition: background-color ${transitionTime()}, color ${transitionTime()};\n    border: 0;\n    border-radius: ${radius('md')};\n    text-decoration: none;\n\n    ${variantColorStyles}\n\n    // disabled\n    &:disabled {\n        cursor: not-allowed;\n        color: ${color('interactive.primary.disabled')};\n\n        ${modifier(\n            'isLoading',\n            css`\n                color: initial;\n                cursor: auto;\n                ${variantColorStyles}\n            `,\n        )}\n    }\n`;\n","import type { CssDeclaration } from '../styled';\nimport { css } from '../styled';\nimport { color, modifier, radius, spacing, typography, variants } from '../theme';\n\nexport const withInputErrorStyle = css`\n    border-color: ${color('red.600')};\n`;\n\nexport const withInputErrorModifier = modifier('error', withInputErrorStyle);\n\nexport const withInputDisabledStyle = css`\n    color: ${color('content.disabled')};\n    background-color: ${color('surface.secondary')};\n    border-color: ${color('border.primary')};\n\n    &:hover,\n    [data-dev-state='hover'] & {\n        border-color: ${color('border.primary')};\n    }\n\n    &:focus,\n    [data-dev-state='focus'] & {\n        border-color: ${color('border.primary')};\n    }\n\n    &::placeholder {\n        color: ${color('content.disabled')};\n    }\n`;\n\nexport const withInputDisabledModifier = css`\n    ${modifier('disabled', withInputDisabledStyle)}\n\n    &:disabled {\n        ${withInputDisabledStyle}\n    }\n`;\n\nexport interface InputStyleProps {\n    error?: boolean;\n    disabled?: boolean;\n}\n\nexport const withInputContainerStyle = css<InputStyleProps>`\n    box-sizing: border-box;\n\n    ${typography('description')};\n\n    width: 100%;\n    color: ${color('content.primary')};\n    border: 1px solid ${color('border.primary')};\n    border-radius: ${radius('md')};\n    transition: border-color ease-in-out 0.15s;\n    padding: ${spacing(2, 3)};\n    background-color: ${color('background.input')};\n\n    @media (prefers-reduced-motion: reduce) {\n        transition: none;\n    }\n\n    &:hover,\n    [data-dev-state='hover'] & {\n        border-color: ${color('primary.300')};\n    }\n\n    &:focus-within,\n    [data-dev-state='focus'] & {\n        border-color: ${color('primary.500')};\n    }\n\n    ${withInputErrorModifier}\n    ${withInputDisabledModifier}\n`;\n\nexport const withInputFieldStyle = css<InputStyleProps>`\n    box-sizing: content-box;\n    -webkit-font-smoothing: subpixel-antialiased;\n\n    ${typography('description')};\n    color: ${color('content.primary')};\n    background: none;\n\n    &&&:focus,\n    &&&:focus-visible,\n    [data-dev-state='focus'] &&& {\n        outline: none !important;\n    }\n\n    &::placeholder {\n        ${typography('description')};\n        color: ${color('content.secondary')};\n    }\n\n    ${withInputErrorModifier}\n    ${withInputDisabledModifier}\n`;\n\nexport type InputSizeVariants = 'small' | 'default';\n\n/**\n * This helper allows us to define custom styles for inputs in a way that allows size names, defaults and ensuring\n * that all required sizes are defined.\n */\nexport const buildInputSizeStyles = <T extends object>(sizeStyles: Record<InputSizeVariants, CssDeclaration<T>>) =>\n    variants('inputSize', sizeStyles, 'default');\n\nexport const withInputSizeVariants = buildInputSizeStyles({\n    small: css`\n        height: 28px;\n        min-height: 28px;\n        line-height: 28px;\n        ${typography('caption1')};\n\n        &::placeholder {\n            ${typography('caption1')}\n        }\n\n        &::-moz-placeholder {\n            line-height: 28px;\n        }\n    `,\n    default: css`\n        height: 33px;\n        min-height: 33px;\n        line-height: 33px;\n\n        &::-moz-placeholder {\n            line-height: 33px;\n        }\n    `,\n});\n","import type { InputHTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { withInputContainerStyle, withInputFieldStyle, withInputSizeVariants } from '../../utils/styles';\nimport type { InputSizeVariants, InputStyleProps } from '../../utils/styles';\nimport { color, modifier, spacing } from '../../utils/theme';\nimport type { FlexProps } from '../Flex';\nimport { Flex } from '../Flex';\n\nexport const Container = styled.div`\n    width: 100%;\n    display: grid;\n    gap: ${spacing(1)};\n    grid-template-columns: minmax(50px, 1fr); /* This ensures Input doesn't overflow 100% */\n`;\n\ninterface InputInterface extends InputHTMLAttributes<HTMLInputElement>, InputStyleProps {\n    inputSize: InputSizeVariants;\n}\n\nexport const StyledInput = styled.input<InputInterface>`\n    ${withInputFieldStyle};\n\n    border: 0;\n    min-width: 50px;\n    width: 100%;\n    padding: 0;\n    display: block;\n\n    ${withInputSizeVariants};\n`;\n\nexport const InputIcon = styled.div`\n    line-height: 1;\n    font-size: 0;\n`;\n\ntype InputContainerProps = {\n    hasPrefix?: boolean;\n    hasSuffix?: boolean;\n    disabled?: boolean;\n    error?: boolean;\n};\n\nexport const InputContainer = styled(Flex)<FlexProps & InputContainerProps>`\n    ${withInputContainerStyle};\n\n    align-items: center;\n    padding: ${spacing(0, 3)};\n    color: ${color('content.secondary')};\n\n    &:focus-within,\n    [data-dev-state='focus'] & {\n        color: ${color('primary.500')};\n    }\n\n    // All items should preserve their width\n    > * {\n        flex-shrink: 0;\n    }\n\n    // Except input\n    > ${StyledInput} {\n        flex-shrink: 1;\n    }\n\n    ${modifier(\n        'hasPrefix',\n        css`\n            padding-left: ${spacing(2)};\n        `,\n    )};\n\n    ${modifier(\n        'hasSuffix',\n        css`\n            padding-right: ${spacing(2)};\n        `,\n    )};\n`;\n","import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Error = styled.div`\n    font-family: ${fontFamily('default')};\n    ${typography('message')}\n\n    color: ${color('red.600')};\n    display: grid;\n    gap: ${spacing(1)};\n    grid-template-columns: min-content auto;\n    align-items: center;\n`;\n\nexport const IconContainer = styled.div`\n    align-self: flex-start;\n    height: 20px;\n    font-size: 18px;\n`;\n","import type { StyledProps } from '../../utils/styled';\nimport { css, styled } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type Color = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n    color?: Color;\n    fill?: Color;\n    stroke?: Color;\n    size?: string;\n};\n\nconst commonConfig = { shouldForwardProp: excludeProps(['fill', 'color', 'stroke']) };\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n    color: 'inherit',\n    fill: 'currentColor',\n    stroke: undefined,\n};\n\nconst colorHelper = (\n    colorType: keyof typeof colorTypesDefaults,\n    inputColor: Color | undefined,\n    props: StyledProps<unknown>,\n) =>\n    inputColor && !reservedKeywords.includes(inputColor)\n        ? color(inputColor as NamedColor)(props)\n        : colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n    pointer-events: all;\n    box-sizing: border-box;\n    color: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n    fill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n    stroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n    font-size: ${(props) => props.size};\n`;\n\nexport const SvgRoot = styled.svg.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n    width: 1em;\n    height: 1em;\n`;\n\nexport const Path = styled.path.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Rect = styled.rect.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const G = styled.g.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Circle = styled.circle.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const LinearGradient = styled.linearGradient.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Defs = styled.defs.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Stop = styled.stop.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const ClipPath = styled.clipPath.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n"],"names":[],"sourceRoot":""}