{"version":3,"file":"689.1667d6a2.iframe.bundle.js","mappings":";;;;;AAUA;AACA;;AAEA;;;;;;;;AAQA;AAOA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;;;AAIA;;;;AAIA;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;;;AAMA;AACA;AAGA;AACA;AACA;;AC/DA;;;;;;AAOA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;AAIA;AACA;;AAEA;;;;AAIA;AACA;;;;;AAKA;AACA;;;;;AAKA;AACA;;;;AAIA;AAGA;AACA;;;AAOA;;;;AAIA;AACA;;AAEA;;;AAGA;;;;;AAKA;;AAEA;;;AAKA;;;;;;;AC/JA;AAGA;AACA;AACA;;;;;;;;ACCA;AACA;;;;;AAKA;;;;;;;;;AAdA;AAAA;;;;;;;;AAgCA;AACA;;;;;;;;;;;AAWA;AACA;AACA;;;AAGA;;;;;AAKA;;;;AAIA;;;;AAIA;;;;;AAKA;AACA;;AAEA;;;;AAMA;;;;;;AAOA;;;;;;;;AAWA;AAGA;;;;;AAMA;AAGA;;;;;AAMA;AAGA;;;AC3GA;ACTA;AACA;;AAEA;;AAEA;;;AAKA;;;;;;;;;;;;;ACEA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAWA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;;AAGA;AAuBA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;AC3DA;AACA;AACA;AACA;AAGA;AACA;;;AAKA;AACA;AAGA;AACA;AAGA;AACA;AAWA;AAPA;AAGA;AACA;AAGA;AACA;AAOA;AAHA;AAGA;AACA","sources":["webpack://@lokalise/louis/./src/components/DatePicker/styles.ts","webpack://@lokalise/louis/./src/components/IconButton/styles.ts","webpack://@lokalise/louis/./src/components/InlineDatePicker/DatePickerNav/styles.ts","webpack://@lokalise/louis/./src/components/InlineDatePicker/styles.ts","webpack://@lokalise/louis/./src/components/InlineDatePicker/InlineDatePicker.tsx","webpack://@lokalise/louis/./src/components/InputErrorMessage/styles.ts","webpack://@lokalise/louis/./src/components/Popover/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts"],"sourcesContent":["import { css, styled } from '../../utils/styled';\nimport { color, radius, spacing, transitionTime, typography } from '../../utils/theme';\n\nexport const Container = styled.div`\n    position: relative;\n    width: 100%;\n    display: grid;\n    gap: 4px;\n`;\n\nexport const IconWrapper = styled.div`\n    background-color: ${color('background.secondary')};\n    width: 36px;\n    border-left: 1px solid ${color('border.primary')};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: absolute;\n    right: 0;\n    height: 100%;\n    top: 0;\n    transition: border-color ${transitionTime()}, background-color ${transitionTime()}, color ${transitionTime()};\n`;\n\ntype DateBoxProps = {\n    opened: boolean;\n};\n\nexport const DateBox = styled.button<DateBoxProps>`\n    ${typography('description')};\n    border: 1px solid ${color('border.primary')};\n    height: 35px;\n    width: 100%;\n    color: ${color('content.primary')};\n    padding: ${spacing(1, 3)};\n    padding-right: ${spacing(8)};\n    border-radius: ${radius('md')};\n    overflow: hidden;\n    background-color: ${color('background.primary')};\n    position: relative;\n    align-items: center;\n    text-align: left;\n    transition: border-color ${transitionTime()};\n    cursor: pointer;\n\n    // condition to avoid hover over writing style whe opened\n    ${({ opened }) =>\n        opened\n            ? css`\n                  border-color: ${color('primary.500')};\n\n                  ${IconWrapper} {\n                      border-color: ${color('primary.500')};\n                      background-color: ${color('primary.500')};\n                      color: ${color('content.white')};\n                  }\n              `\n            : css`\n                  &:hover {\n                      border-color: ${color('primary.300')};\n\n                      ${IconWrapper} {\n                          border-color: ${color('primary.300')};\n                          background-color: ${color('primary.200')};\n                          color: ${color('primary.500')};\n                      }\n                  }\n              `}\n`;\n\nexport const DrawerContent = styled.div`\n    margin: ${spacing(4)};\n`;\n\nexport const Placeholder = styled.span`\n    ${typography('description')}\n    color: ${color('content.secondary')};\n`;\n","import { css, styled } from '../../utils/styled';\nimport { color, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance } from './IconButton';\n\ntype IconButtonProps = {\n    appearance: Appearance;\n    active?: boolean;\n    disabled?: boolean;\n    isLoading: boolean;\n};\n\nconst variantColorStyles = css`\n    ${variants('appearance', {\n        primary: css`\n            padding: 6px;\n            font-size: 20px;\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color('surface.primary100')};\n                color: ${color(`primary.500`)};\n            }\n\n            // pressed\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`primary.200`)};\n                color: ${color(`primary.500`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.primary50`)};\n                color: ${color(`primary.500`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.primary50`)};\n                    color: ${color(`primary.500`)};\n                `,\n            )}\n        `,\n        secondary: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`border.secondary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`border.primary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.secondary`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.secondary`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n        verified: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`surface.yellow100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`yellow.200`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.yellow100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.yellow50`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n        reviewed: css`\n            padding: ${spacing(1)};\n            font-size: 16px;\n            color: ${color(`content.secondary`)};\n\n            // hover\n            &:hover:not([disabled]) {\n                background-color: ${color(`surface.green100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // pressed\n            &:focus:active:not([disabled]) {\n                background-color: ${color(`green.200`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // focus\n            &:focus:not([disabled]) {\n                background-color: ${color(`surface.green100`)};\n                color: ${color(`content.primary`)};\n            }\n\n            // activated\n            ${modifier(\n                'active',\n                css`\n                    background-color: ${color(`surface.green50`)};\n                    color: ${color(`content.primary`)};\n                `,\n            )}\n        `,\n    })}\n`;\n\nexport const Container = styled(Pressable)<IconButtonProps>`\n    display: inline-flex;\n    align-items: center;\n    background-color: transparent;\n    color: ${color(`content.primary`)};\n    transition: background-color ${transitionTime()}, color ${transitionTime()};\n    border: 0;\n    border-radius: ${radius('md')};\n    text-decoration: none;\n\n    ${variantColorStyles}\n\n    // disabled\n    &:disabled {\n        cursor: not-allowed;\n        color: ${color('interactive.primary.disabled')};\n\n        ${modifier(\n            'isLoading',\n            css`\n                color: initial;\n                cursor: auto;\n                ${variantColorStyles}\n            `,\n        )}\n    }\n`;\n","import { styled } from '../../../utils/styled';\nimport { color, spacing, typography } from '../../../utils/theme';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: ${spacing(0, 1, 2, 1)};\n`;\n\nexport const Title = styled.div`\n    ${typography('descriptionMedium')};\n    color: ${color('content.primary')};\n    cursor: default;\n`;\n","import DayPicker from 'react-day-picker';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, modifier, radius, typography } from '../../utils/theme';\n\nexport const daySideLength = 36;\n\nexport const StyledDatePicker = styled(DayPicker)<{ rangeSelectable?: boolean }>`\n    .DayPicker-Caption {\n        display: none;\n    }\n\n    .DayPicker-wrapper {\n        width: ${daySideLength * 7}px; // 7 columns\n        font-family: ${fontFamily('default')};\n    }\n\n    .DayPicker-Month {\n        margin: 0;\n        height: ${daySideLength * 7}px; // 7 rows\n    }\n\n    .DayPicker-WeekdaysRow {\n        display: flex;\n    }\n\n    .DayPicker-Weekday,\n    .DayPicker-Day {\n        width: ${daySideLength}px;\n        height: ${daySideLength}px;\n        display: inline-flex;\n        justify-content: center;\n        align-items: center;\n        cursor: pointer;\n    }\n\n    .DayPicker-Weekday {\n        ${typography('caption2')};\n        color: ${color('content.secondary')};\n        cursor: default;\n\n        abbr {\n            text-decoration: none;\n            border-bottom: 0; // Remove once bootstrap is removed\n            cursor: default; // Remove once bootstrap is removed\n        }\n    }\n\n    .DayPicker-Day {\n        ${typography('captionMedium')};\n        border-radius: ${radius('md')};\n        color: ${color('content.primary')};\n\n        &:hover:not(.DayPicker-Day--today):not(.DayPicker-Day--disabled) {\n            background-color: ${color('primary.200')};\n        }\n    }\n\n    .DayPicker-Day--outside {\n        color: ${color('content.secondary')};\n    }\n\n    .DayPicker-Day--today {\n        color: ${color('primary.500')};\n    }\n\n    .DayPicker-Day--disabled {\n        color: ${color('content.disabled')};\n        cursor: not-allowed;\n    }\n\n    .DayPicker-Day--selected:not(.DayPicker-Day--disabled) {\n        background-color: ${color('interactive.primary.idle')};\n        color: ${color('content.white')};\n\n        ${modifier(\n            'rangeSelectable',\n            css`\n                &:hover,\n                &:active,\n                &:focus {\n                    background-color: ${color('interactive.primary.idle')};\n                }\n            `,\n        )}\n    }\n\n    .DayPicker-Day--selected:not(.DayPicker-Day--start):not(.DayPicker-Day--end) {\n        ${modifier(\n            'rangeSelectable',\n            css`\n                background-color: rgb(84, 137, 220, 0.3);\n                color: #333333;\n                border-radius: 0;\n            `,\n        )}\n    }\n\n    .DayPicker-Day--start {\n        ${modifier(\n            'rangeSelectable',\n            css`\n                border-radius: ${radius('md')} 0 0 ${radius('md')};\n            `,\n        )}\n    }\n\n    .DayPicker-Day--end {\n        ${modifier(\n            'rangeSelectable',\n            css`\n                border-radius: 0 ${radius('md')} ${radius('md')} 0;\n            `,\n        )}\n    }\n\n    .DayPicker-Day--start.DayPicker-Day--end {\n        ${modifier(\n            'rangeSelectable',\n            css`\n                border-radius: ${radius('md')};\n            `,\n        )}\n    }\n`;\n","import React from 'react';\nimport type { DayPickerProps as ReactDatePickerProps } from 'react-day-picker';\n\nimport { useLocalisation } from '../../utils/hooks';\nimport { DatePickerNav } from './DatePickerNav';\nimport { StyledDatePicker } from './styles';\n\nexport interface InlineDatePickerProps\n    extends Omit<ReactDatePickerProps, 'navbarElement' | 'className' | 'classNames' | 'firstDayOfWeek'> {\n    rangeSelectable?: boolean;\n    disablePast?: boolean;\n}\n\nexport const InlineDatePicker = ({ ...rest }: InlineDatePickerProps) => {\n    const { firstDayOfWeek } = useLocalisation();\n\n    return (\n        <StyledDatePicker\n            firstDayOfWeek={firstDayOfWeek}\n            navbarElement={({ month, onNextClick, onPreviousClick }) => (\n                <DatePickerNav month={month} onNextClick={onNextClick} onPreviousClick={onPreviousClick} />\n            )}\n            showOutsideDays\n            {...rest}\n        />\n    );\n};\n","import { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing, typography } from '../../utils/theme';\n\nexport const Error = styled.div`\n    font-family: ${fontFamily('default')};\n    ${typography('message')}\n\n    color: ${color('red.600')};\n    display: grid;\n    gap: ${spacing(1)};\n    grid-template-columns: min-content auto;\n    align-items: center;\n`;\n\nexport const IconContainer = styled.div`\n    align-self: flex-start;\n    height: 20px;\n    font-size: 18px;\n`;\n","import type { Placement } from '@popperjs/core/lib/enums';\nimport type { HTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, radius, variants, zIndex } from '../../utils/theme';\n\nconst bottom = css`\n    top: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst top = css`\n    bottom: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\nconst left = css`\n    right: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst right = css`\n    left: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\n\nexport const Arrow = styled.div<{ placement?: Placement }>`\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    z-index: ${zIndex('hide')};\n\n    &::before {\n        position: absolute;\n        width: 8px;\n        height: 8px;\n        z-index: ${zIndex('hide')};\n        content: '';\n        display: block;\n        transform: rotate(45deg);\n        background-color: ${color('background.primary')};\n        border-color: ${color('border.primary')};\n    }\n\n    ${variants(\n        'placement',\n        {\n            top,\n            bottom,\n            left,\n            right,\n            'right-end': right,\n            'right-start': right,\n            'left-start': left,\n            'auto-end': css``,\n            'auto-start': css``,\n            auto: css``,\n            'bottom-end': bottom,\n            'bottom-start': bottom,\n            'left-end': left,\n            'top-end': top,\n            'top-start': top,\n        },\n        'auto',\n    )}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n    padding: 0;\n    border-radius: ${radius('md')};\n    background-color: ${color('background.primary')};\n    border: 1px solid ${color('border.primary')};\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    z-index: ${zIndex('popover')};\n    color: ${color('content.primary')};\n    font-weight: 400;\n`;\n","import type { StyledProps } from '../../utils/styled';\nimport { css, styled } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type Color = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n    color?: Color;\n    fill?: Color;\n    stroke?: Color;\n    size?: string;\n};\n\nconst commonConfig = { shouldForwardProp: excludeProps(['fill', 'color', 'stroke']) };\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n    color: 'inherit',\n    fill: 'currentColor',\n    stroke: undefined,\n};\n\nconst colorHelper = (\n    colorType: keyof typeof colorTypesDefaults,\n    inputColor: Color | undefined,\n    props: StyledProps<unknown>,\n) =>\n    inputColor && !reservedKeywords.includes(inputColor)\n        ? color(inputColor as NamedColor)(props)\n        : colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n    pointer-events: all;\n    box-sizing: border-box;\n    color: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n    fill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n    stroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n    font-size: ${(props) => props.size};\n`;\n\nexport const SvgRoot = styled.svg.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n    width: 1em;\n    height: 1em;\n`;\n\nexport const Path = styled.path.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Rect = styled.rect.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const G = styled.g.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Circle = styled.circle.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const LinearGradient = styled.linearGradient.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Defs = styled.defs.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Stop = styled.stop.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const ClipPath = styled.clipPath.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n"],"names":[],"sourceRoot":""}