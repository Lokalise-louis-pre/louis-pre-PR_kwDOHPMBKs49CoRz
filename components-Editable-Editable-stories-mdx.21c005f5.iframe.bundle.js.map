{"version":3,"file":"components-Editable-Editable-stories-mdx.21c005f5.iframe.bundle.js","mappings":";;;;;;;;;AAgBA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAWA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;;AAGA;AAuBA;;AAEA;AACA;AACA;;AAEA;AACA;;;AC3FA;;;AAGA;AAGA;;;;;;;;AAUA;AACA;;;ACkCA;AACA;;AAGA;AAgHA;AACA;;AAGA","sources":["webpack://@lokalise/louis/./src/components/Popover/styles.ts","webpack://@lokalise/louis/./src/components/Editable/styles.ts","webpack://@lokalise/louis/./src/components/Editable/Editable.stories.mdx"],"sourcesContent":["import type { Placement } from '@popperjs/core/lib/enums';\nimport type { HTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, radius, variants, zIndex } from '../../utils/theme';\n\nconst bottom = css`\n    top: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst top = css`\n    bottom: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\nconst left = css`\n    right: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst right = css`\n    left: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\n\nexport const Arrow = styled.div<{ placement?: Placement }>`\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    z-index: ${zIndex('hide')};\n\n    &::before {\n        position: absolute;\n        width: 8px;\n        height: 8px;\n        z-index: ${zIndex('hide')};\n        content: '';\n        display: block;\n        transform: rotate(45deg);\n        background-color: ${color('background.primary')};\n        border-color: ${color('border.primary')};\n    }\n\n    ${variants(\n        'placement',\n        {\n            top,\n            bottom,\n            left,\n            right,\n            'right-end': right,\n            'right-start': right,\n            'left-start': left,\n            'auto-end': css``,\n            'auto-start': css``,\n            auto: css``,\n            'bottom-end': bottom,\n            'bottom-start': bottom,\n            'left-end': left,\n            'top-end': top,\n            'top-start': top,\n        },\n        'auto',\n    )}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n    padding: 0;\n    border-radius: ${radius('md')};\n    background-color: ${color('background.primary')};\n    border: 1px solid ${color('border.primary')};\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    z-index: ${zIndex('popover')};\n    color: ${color('content.primary')};\n    font-weight: 400;\n`;\n","import { styled } from '../../utils/styled';\nimport { color, spacing } from '../../utils/theme';\n\nexport const Container = styled.div`\n    padding: ${spacing(4)};\n    width: 230px;\n    display: grid;\n    gap: ${spacing(2)};\n`;\n\nexport const Trigger = styled.button`\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    font-size: inherit;\n    font-weight: inherit;\n    font-style: inherit;\n    color: inherit;\n`;\n\nexport const Empty = styled.span`\n    color: ${color('red.600')};\n    font-style: italic;\n`;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';\nimport { useArgs } from '@storybook/client-api';\nimport { styled } from '../../utils/styled';\nimport { fontFamily, typography } from '../../utils/theme';\nimport { Editable } from './Editable';\nexport const Template = args => {\n  const {\n    onChange,\n    ...rest\n  } = args;\n  const [_, updateArgs] = useArgs();\n\n  const handleChange = newValue => {\n    updateArgs({\n      value: newValue\n    });\n  };\n\n  return <Editable onChange={handleChange} {...rest} mdxType=\"Editable\" />;\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst StoryContent = makeShortcode(\"StoryContent\");\nconst layoutProps = {\n  Template\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Meta title=\"Components/Editable\" component={Editable} parameters={{\n      controls: {\n        sort: 'requiredFirst'\n      },\n      docs: {\n        source: {\n          excludeDecorators: true\n        }\n      }\n    }} decorators={[Story => {\n      const StoryContent = styled.div`\n                font-family: ${fontFamily('default')};\n                ${typography('body')};\n                padding: 115px 0 0 80px;\n            `;\n      return <StoryContent mdxType=\"StoryContent\">\n                    <Story mdxType=\"Story\" />\n                </StoryContent>;\n    }]} mdxType=\"Meta\" />\n    <h1>{`Editable`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#overview\"\n        }}>{`Overview`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#figma-design-file\"\n        }}>{`Figma Design File`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#props\"\n        }}>{`Props`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#examples\"\n        }}>{`Examples`}</a></li>\n    </ul>\n    <h2 id=\"overview\">Overview</h2>\n    <p>{`Editable is used for editing inline text by clicking on the text.`}</p>\n    <h3>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @lokalise/louis\n`}</code></pre>\n    <h3>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useState } from 'react';\nimport { Editable } from '@lokalise/louis';\n\nexport default () => {\n    const [value, setValue] = useState();\n    return <Editable value={value} onChange={setValue} />;\n};\n`}</code></pre>\n    <h2 id=\"figma-design-file\">Figma Design File</h2>\n    <ul>\n      <li parentName=\"ul\">{`Figma Source File | Editable (not yet available in Figma, will be updated)`}</li>\n    </ul>\n    <h2 id=\"props\">Props</h2>\n    <ArgsTable of={Editable} sort=\"requiredFirst\" mdxType=\"ArgsTable\" />\n    <h2 id=\"examples\">Examples</h2>\n    <h3>{`Default`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n    <Story name=\"Default\" args={{\n        value: 'Editable text'\n      }} mdxType=\"Story\">\n        {Template.bind({})}\n    </Story>\n    </Canvas>\n    <h3>{`Empty Text`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n    <Story name=\"Empty Text\" args={{\n        value: '',\n        emptyText: 'This Editable has an empty string as the value',\n        placeholder: 'Enter text'\n      }} mdxType=\"Story\">\n        {Template.bind({})}\n    </Story>\n    </Canvas>\n    <h3>{`Disabled`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n    <Story name=\"Disabled\" args={{\n        value: 'Disabled editable text',\n        disabled: true\n      }} mdxType=\"Story\">\n        {Template.bind({})}\n    </Story>\n    </Canvas>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const defaultStory = Template.bind({});\ndefaultStory.storyName = 'Default';\ndefaultStory.args = {\n  value: 'Editable text'\n};\ndefaultStory.parameters = { storySource: { source: 'args => {\\n  const {\\n    onChange,\\n    ...rest\\n  } = args;\\n  const [_, updateArgs] = useArgs();\\n\\n  const handleChange = newValue => {\\n    updateArgs({\\n      value: newValue\\n    });\\n  };\\n\\n  return <Editable onChange={handleChange} {...rest} />;\\n}' } };\n\nexport const emptyText = Template.bind({});\nemptyText.storyName = 'Empty Text';\nemptyText.args = {\n  value: '',\n  emptyText: 'This Editable has an empty string as the value',\n  placeholder: 'Enter text'\n};\nemptyText.parameters = { storySource: { source: 'args => {\\n  const {\\n    onChange,\\n    ...rest\\n  } = args;\\n  const [_, updateArgs] = useArgs();\\n\\n  const handleChange = newValue => {\\n    updateArgs({\\n      value: newValue\\n    });\\n  };\\n\\n  return <Editable onChange={handleChange} {...rest} />;\\n}' } };\n\nexport const disabled = Template.bind({});\ndisabled.storyName = 'Disabled';\ndisabled.args = {\n  value: 'Disabled editable text',\n  disabled: true\n};\ndisabled.parameters = { storySource: { source: 'args => {\\n  const {\\n    onChange,\\n    ...rest\\n  } = args;\\n  const [_, updateArgs] = useArgs();\\n\\n  const handleChange = newValue => {\\n    updateArgs({\\n      value: newValue\\n    });\\n  };\\n\\n  return <Editable onChange={handleChange} {...rest} />;\\n}' } };\n\nconst componentMeta = { title: 'Components/Editable', parameters: {\n  controls: {\n    sort: 'requiredFirst'\n  },\n  docs: {\n    source: {\n      excludeDecorators: true\n    }\n  }\n}, decorators: [Story => {\n  const StoryContent = styled.div`\n                font-family: ${fontFamily('default')};\n                ${typography('body')};\n                padding: 115px 0 0 80px;\n            `;\n  return <StoryContent>\n                    <Story />\n                </StoryContent>;\n}], component: Editable, includeStories: [\"defaultStory\",\"emptyText\",\"disabled\"],  };\n\nconst mdxStoryNameToKey = {\"Default\":\"defaultStory\",\"Empty Text\":\"emptyText\",\"Disabled\":\"disabled\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"names":[],"sourceRoot":""}