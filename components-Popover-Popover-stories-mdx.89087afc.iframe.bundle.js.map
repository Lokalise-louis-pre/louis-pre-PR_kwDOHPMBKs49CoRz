{"version":3,"file":"components-Popover-Popover-stories-mdx.89087afc.iframe.bundle.js","mappings":";;AA8BA;AACA;AAIA;AAGA;AACA;AACA;AAIA;AAQA;AACA;AACA;;;AAGA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AAGA;AACA;;AAMA;AACA;AAEA;AACA;;;;AAIA;;AAGA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;AAIA;AACA;;;AAGA;;;;AAIA;;;AAGA;;;AAMA;;;;;;;AAOA;;;AAGA;;AAEA;;AAEA;;AAGA;;;AAIA;;AAEA;;;AAIA;;AAEA;;;AAIA;;AAEA;;;;;AAMA;;;;AAIA;AACA;AACA;;AAEA;;AAIA;;;;;;;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;AAIA;;;AAQA;;;;;;AAMA;;AAIA;;AAGA;;AAGA;;;AAMA;;;;;;;;;;;;;;;ACjNA;;;;;;;;;AAUA;;;;;;;;;AAUA;;;;;;;;;AAWA;;;;AAIA;;;;;;AAMA;;;;AAIA;AACA;;;AAGA;AAuBA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;AC3DA;AACA;AACA;AACA;AAGA;AACA;;;AAKA;AACA;AAGA;AACA;AAGA;AACA;AAWA;AAPA;AAGA;AACA;AAGA;AACA;AAOA;AAHA;AAGA;AACA;;AC/DA;AACA;AACA;AAEA","sources":["webpack://@lokalise/louis/./src/components/Button/styles.ts","webpack://@lokalise/louis/./src/components/Popover/styles.ts","webpack://@lokalise/louis/./src/foundations/icons/styles.ts","webpack://@lokalise/louis/./src/components/Popover/Popover.stories.mdx"],"sourcesContent":["import { LoadingSignIcon } from '../../foundations/icons';\nimport { css, styled } from '../../utils/styled';\nimport { color, fontFamily, modifier, radius, spacing, transitionTime, variants } from '../../utils/theme';\nimport { Pressable } from '../Pressable';\nimport type { Appearance, ButtonVariant, Size } from './Button';\n\ntype ButtonProps = {\n    size: Size;\n    variant: ButtonVariant;\n    appearance: Appearance;\n    active: boolean;\n    disabled: boolean;\n    isLoading: boolean;\n};\n\nconst appearanceToColorCode = (appearance: Appearance) => {\n    const colorCodes = {\n        default: 'primary',\n        primary: 'primary',\n        danger: 'red',\n        warning: 'yellow',\n    } as const;\n\n    return colorCodes[appearance];\n};\n\nconst getOutlineStyles = (colorType: 'idle' | 'hover', appearance: Appearance, transparent = false) => {\n    if (appearance === 'default') {\n        return css`\n            background-color: transparent;\n            color: ${color('content.primary')};\n            border-color: ${color('content.primary')};\n        `;\n    }\n\n    const appearanceColorCode = appearanceToColorCode(appearance);\n\n    return css`\n        background-color: ${transparent ? 'transparent' : color(`surface.${appearanceColorCode}50`)};\n        border-color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n        color: ${color(`interactive.${appearanceColorCode}.${colorType}`)};\n    `;\n};\n\nconst getColorStyles = (appearance: Appearance, colorCode: 'white' | 'black') => {\n    if (appearance === 'default') {\n        return undefined;\n    }\n\n    const appearanceColorCode = appearanceToColorCode(appearance);\n\n    return css`\n        background-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n        border-color: ${color(`interactive.${appearanceColorCode}.idle`)};\n        color: ${color(`content.${colorCode}`)};\n\n        &:hover:not([disabled]):not([aria-expanded='true']) {\n            background-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n            border-color: ${color(`interactive.${appearanceColorCode}.hover`)};\n            color: ${color(`content.${colorCode}`)};\n        }\n\n        &:active:not([disabled]) {\n            background-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n            border-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n        }\n\n        ${modifier(\n            'active',\n            css`\n                background-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n                border-color: ${color(`interactive.${appearanceColorCode}.pressed`)};\n            `,\n        )}\n    `;\n};\n\nconst variantColorStyles = css`\n    ${variants('appearance', {\n        default: css<ButtonProps>`\n            background-color: ${color(`content.white`)};\n            color: ${color('primary.400')};\n            border-color: transparent;\n\n            &:hover:not([disabled]):not([aria-expanded='true']) {\n                color: ${color('primary.500')};\n            }\n        `,\n        primary: css<ButtonProps>`\n            ${getColorStyles('primary', 'white')}\n        `,\n        warning: css<ButtonProps>`\n            ${getColorStyles('warning', 'black')}\n        `,\n        danger: css<ButtonProps>`\n            ${getColorStyles('danger', 'white')}\n        `,\n    })}\n\n    ${variants('variant', {\n        solid: css``,\n        outline: css<ButtonProps>`\n            border-width: 1px;\n            ${({ appearance }) => css`\n                ${getOutlineStyles('idle', appearance, true)}\n\n                &:hover:not([disabled]):not([aria-expanded='true']) {\n                    ${getOutlineStyles('hover', appearance, true)}\n                }\n\n                &:active:not([disabled]) {\n                    ${getOutlineStyles('hover', appearance)}\n                }\n\n                ${modifier('active', getOutlineStyles('hover', appearance))}\n            `}\n        `,\n    })}\n`;\n\nexport const Container = styled(Pressable)<ButtonProps>`\n    display: inline-flex;\n    align-items: center;\n    background-color: transparent;\n    border: 1px solid transparent;\n    text-decoration: none;\n    vertical-align: middle;\n    border-radius: ${radius('md')};\n    cursor: pointer;\n    position: relative;\n    transition: all ${transitionTime()};\n    box-sizing: border-box;\n    font-family: ${fontFamily('default')};\n\n    ${variants('size', {\n        xs: css`\n            font-size: 11px;\n            padding: ${spacing(0, 2)};\n            height: 20px;\n            line-height: 12px;\n        `,\n        sm: css`\n            font-size: 12px;\n            padding: ${spacing(0, 3)};\n            height: 30px;\n            line-height: 12px;\n        `,\n        md: css`\n            font-size: 14px;\n            padding: ${spacing(0, 3)};\n            height: 35px;\n            line-height: 14px;\n        `,\n        lg: css`\n            font-size: 18px;\n            padding: ${spacing(0, 4)};\n            height: 45px;\n            line-height: 18px;\n        `,\n    })}\n\n    ${variantColorStyles}\n\n    &:disabled {\n        cursor: not-allowed;\n        background-color: ${color('surface.secondary')};\n        color: ${color('content.disabled')};\n        border-color: ${color('content.disabled')};\n\n        ${modifier('isLoading', variantColorStyles)}\n    }\n`;\n\nexport const Content = styled.span<{ isHidden: boolean; size: Size }>`\n    display: grid;\n    grid-auto-flow: column;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n\n    ${variants('size', {\n        xs: css`\n            gap: ${spacing(1)};\n        `,\n        sm: css`\n            gap: ${spacing(2)};\n        `,\n        md: css`\n            gap: ${spacing(2)};\n        `,\n        lg: css`\n            gap: ${spacing(2)};\n        `,\n    })}\n\n    ${modifier(\n        'isHidden',\n        css`\n            opacity: 0;\n        `,\n    )}\n`;\n\nexport const Text = styled.span<{ size: Size }>`\n    position: relative;\n    align-items: center;\n    display: inline-flex;\n    white-space: nowrap;\n\n    ${variants('size', {\n        xs: css`\n            top: 0;\n        `,\n        sm: css`\n            top: -1px; // Make text visually centered\n        `,\n        md: css`\n            top: -1px; // Make text visually centered\n        `,\n        lg: css`\n            top: -1px; // Make text visually centered\n        `,\n    })}\n`;\n\nexport const StyledLoadingSign = styled(LoadingSignIcon)`\n    font-size: 1.3em;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n`;\n","import type { Placement } from '@popperjs/core/lib/enums';\nimport type { HTMLAttributes } from 'react';\n\nimport { css, styled } from '../../utils/styled';\nimport { color, radius, variants, zIndex } from '../../utils/theme';\n\nconst bottom = css`\n    top: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst top = css`\n    bottom: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\nconst left = css`\n    right: -5px;\n\n    &::before {\n        border-right-width: 1px;\n        border-right-style: solid;\n        border-top-width: 1px;\n        border-top-style: solid;\n    }\n`;\nconst right = css`\n    left: -5px;\n\n    &::before {\n        border-left-width: 1px;\n        border-left-style: solid;\n        border-bottom-width: 1px;\n        border-bottom-style: solid;\n    }\n`;\n\nexport const Arrow = styled.div<{ placement?: Placement }>`\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    z-index: ${zIndex('hide')};\n\n    &::before {\n        position: absolute;\n        width: 8px;\n        height: 8px;\n        z-index: ${zIndex('hide')};\n        content: '';\n        display: block;\n        transform: rotate(45deg);\n        background-color: ${color('background.primary')};\n        border-color: ${color('border.primary')};\n    }\n\n    ${variants(\n        'placement',\n        {\n            top,\n            bottom,\n            left,\n            right,\n            'right-end': right,\n            'right-start': right,\n            'left-start': left,\n            'auto-end': css``,\n            'auto-start': css``,\n            auto: css``,\n            'bottom-end': bottom,\n            'bottom-start': bottom,\n            'left-end': left,\n            'top-end': top,\n            'top-start': top,\n        },\n        'auto',\n    )}\n`;\n\nexport const Content = styled.div<HTMLAttributes<HTMLElement>>`\n    padding: 0;\n    border-radius: ${radius('md')};\n    background-color: ${color('background.primary')};\n    border: 1px solid ${color('border.primary')};\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    z-index: ${zIndex('popover')};\n    color: ${color('content.primary')};\n    font-weight: 400;\n`;\n","import type { StyledProps } from '../../utils/styled';\nimport { css, styled } from '../../utils/styled';\nimport { color, excludeProps } from '../../utils/theme';\n\ntype NamedColor = Parameters<typeof color>[0];\nexport type Color = NamedColor | 'currentColor' | 'inherit';\n\ntype SvgProps = {\n    color?: Color;\n    fill?: Color;\n    stroke?: Color;\n    size?: string;\n};\n\nconst commonConfig = { shouldForwardProp: excludeProps(['fill', 'color', 'stroke']) };\n\nconst reservedKeywords = ['currentColor', 'inherit'];\n\nconst colorTypesDefaults = {\n    color: 'inherit',\n    fill: 'currentColor',\n    stroke: undefined,\n};\n\nconst colorHelper = (\n    colorType: keyof typeof colorTypesDefaults,\n    inputColor: Color | undefined,\n    props: StyledProps<unknown>,\n) =>\n    inputColor && !reservedKeywords.includes(inputColor)\n        ? color(inputColor as NamedColor)(props)\n        : colorTypesDefaults[colorType];\n\nconst commonStyles = css<SvgProps>`\n    pointer-events: all;\n    box-sizing: border-box;\n    color: ${({ color: svgColor, ...props }) => colorHelper('color', svgColor, props)};\n    fill: ${({ fill, ...props }) => colorHelper('fill', fill, props)};\n    stroke: ${({ stroke, ...props }) => colorHelper('stroke', stroke, props)};\n    font-size: ${(props) => props.size};\n`;\n\nexport const SvgRoot = styled.svg.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n    width: 1em;\n    height: 1em;\n`;\n\nexport const Path = styled.path.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Rect = styled.rect.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const G = styled.g.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Circle = styled.circle.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const LinearGradient = styled.linearGradient.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Defs = styled.defs.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const Stop = styled.stop.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n\nexport const ClipPath = styled.clipPath.withConfig<SvgProps>(commonConfig)`\n    ${commonStyles};\n`;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport { Meta, Story, Canvas, ArgsTable } from '@storybook/addon-docs';\nimport { styled } from '../../utils/styled';\nimport { color, fontFamily, spacing } from '../../utils/theme';\nimport { Button } from '../Button';\nimport { Popover } from './Popover';\nexport const PopoverContent = styled.div`\n    padding: ${spacing(4)};\n    font: 12px ${fontFamily('default')};\n    color: ${color('content.primary')};\n`;\nexport const Template = args => <Popover {...args} mdxType=\"Popover\" />;\n\nconst layoutProps = {\n  PopoverContent,\nTemplate\n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Meta title=\"Components/Popover\" component={Popover} parameters={{\n      controls: {\n        sort: 'requiredFirst',\n        exclude: ['children', 'popoverContent', 'components']\n      },\n      docs: {\n        source: {\n          excludeDecorators: true\n        }\n      }\n    }} argTypes={{\n      visibleCallback: {\n        action: 'visibleCallback'\n      }\n    }} decorators={[Story => <div style={{\n      marginBottom: '45px'\n    }}>\n                <Story mdxType=\"Story\" />\n            </div>]} mdxType=\"Meta\" />\n    <h1>{`Popover`}</h1>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#overview\"\n        }}>{`Overview`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#figma-design-file\"\n        }}>{`Figma Design File`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#props\"\n        }}>{`Props`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#examples\"\n        }}>{`Examples`}</a></li>\n    </ul>\n    <h2 id=\"overview\">Overview</h2>\n    <p>{`Popover is used to display in-product help content, attached to the child element passed to it.`}</p>\n    <p>{`Popover depends on:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <a href=\"https://popper.js.org/react-popper/\" target=\"_blank\">\n    react-popper\n        </a> / <a href=\"https://popper.js.org/docs/v2/\" target=\"_blank\">\n    popperjs\n        </a>\n      </li>\n      <li parentName=\"ul\">\n        <a href=\"https://github.com/maslianok/react-resize-detector\" target=\"_blank\">\n    react-resize-detector\n        </a>\n      </li>\n      <li parentName=\"ul\">\n        <a href=\"https://reach.tech/portal/\" target=\"_blank\">\n    reach/portal\n        </a>\n      </li>\n    </ul>\n    <h3>{`Installation`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @lokalise/louis\n`}</code></pre>\n    <h3>{`Usage`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { Popover } from \"@lokalise/louis\";\n\nexport default () => (\n  <Popover popoverContent=\"Popover content\">Hello World</Popover>;\n)\n`}</code></pre>\n    <h2 id=\"figma-design-file\">Figma Design File</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <a href=\"https://www.figma.com/file/zfCOLmZam4nrttG6IVzQyz/UI-Library?node-id=4029%3A21088\" target=\"_blank\">\n    Figma Source File | Popover\n        </a>\n      </li>\n    </ul>\n    <h2 id=\"props\">Props</h2>\n    <ArgsTable of={Popover} sort=\"requiredFirst\" mdxType=\"ArgsTable\" />\n    <h2 id=\"examples\">Examples</h2>\n    <h3>{`Trigger Event`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n    <Story name=\"On Click\" args={{\n        withArrow: true,\n        popoverContent: <PopoverContent mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">On click</Button>\n      }} mdxType=\"Story\">\n        {Template.bind({})}\n    </Story>\n    <Story name=\"On Hover\" args={{\n        withArrow: true,\n        triggerEvent: 'hover',\n        popoverContent: <PopoverContent mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">On hover</Button>\n      }} mdxType=\"Story\">\n        {Template.bind({})}\n    </Story>\n    <Story name=\"On Disabled Hover\" args={{\n        withArrow: true,\n        triggerEvent: 'hover',\n        popoverContent: <PopoverContent mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" disabled mdxType=\"Button\">\n                    On disabled hover\n                </Button>\n      }} mdxType=\"Story\">\n        {Template.bind({})}\n    </Story>\n    </Canvas>\n    <h3>{`Offset and Placement`}</h3>\n    <Canvas withSource=\"open\" mdxType=\"Canvas\">\n    <Story name=\"Offset\" args={{\n        withArrow: false,\n        offset: 5,\n        popoverContent: <PopoverContent mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">Offset: 5</Button>\n      }} mdxType=\"Story\">\n        {Template.bind({})}\n    </Story>\n    <Story name=\"Placement\" args={{\n        withArrow: true,\n        placement: 'right',\n        popoverContent: <PopoverContent mdxType=\"PopoverContent\">Popover content</PopoverContent>,\n        children: <Button variant=\"outline\" mdxType=\"Button\">Placement: right</Button>\n      }} mdxType=\"Story\">\n        {Template.bind({})}\n    </Story>\n    </Canvas>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n\nexport const onClick = Template.bind({});\nonClick.storyName = 'On Click';\nonClick.args = {\n  withArrow: true,\n  popoverContent: <PopoverContent>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\">On click</Button>\n};\nonClick.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const onHover = Template.bind({});\nonHover.storyName = 'On Hover';\nonHover.args = {\n  withArrow: true,\n  triggerEvent: 'hover',\n  popoverContent: <PopoverContent>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\">On hover</Button>\n};\nonHover.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const onDisabledHover = Template.bind({});\nonDisabledHover.storyName = 'On Disabled Hover';\nonDisabledHover.args = {\n  withArrow: true,\n  triggerEvent: 'hover',\n  popoverContent: <PopoverContent>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\" disabled>\n                    On disabled hover\n                </Button>\n};\nonDisabledHover.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const offset = Template.bind({});\noffset.storyName = 'Offset';\noffset.args = {\n  withArrow: false,\n  offset: 5,\n  popoverContent: <PopoverContent>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\">Offset: 5</Button>\n};\noffset.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nexport const placement = Template.bind({});\nplacement.storyName = 'Placement';\nplacement.args = {\n  withArrow: true,\n  placement: 'right',\n  popoverContent: <PopoverContent>Popover content</PopoverContent>,\n  children: <Button variant=\"outline\">Placement: right</Button>\n};\nplacement.parameters = { storySource: { source: 'args => <Popover {...args} />' } };\n\nconst componentMeta = { title: 'Components/Popover', parameters: {\n  controls: {\n    sort: 'requiredFirst',\n    exclude: ['children', 'popoverContent', 'components']\n  },\n  docs: {\n    source: {\n      excludeDecorators: true\n    }\n  }\n}, decorators: [Story => <div style={{\n  marginBottom: '45px'\n}}>\n                <Story />\n            </div>], component: Popover, argTypes: {\n  visibleCallback: {\n    action: 'visibleCallback'\n  }\n}, includeStories: [\"onClick\",\"onHover\",\"onDisabledHover\",\"offset\",\"placement\"],  };\n\nconst mdxStoryNameToKey = {\"On Click\":\"onClick\",\"On Hover\":\"onHover\",\"On Disabled Hover\":\"onDisabledHover\",\"Offset\":\"offset\",\"Placement\":\"placement\"};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"names":[],"sourceRoot":""}